AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Parameters:
  RoleName:
    Type: String
    Default: ApexLegendsRankingCron
Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Description: Describe what you want
      Path: /
      Policies:
      - PolicyName: AllowDynamoDBActions
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: dynamodb:*
            Resource: arn:aws:dynamodb:ap-northeast-1:*:table/ApexLegendsRanking
    Metadata:
      SamResourceId: LambdaRole
  Lambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://aws-sam-cli-managed-default-samclisourcebucket-b50fa4nr27u0/ApexLegendsRanking-cron/83b6669f62fe4731a2f3778e02c385a1
      Description: LambdaSample
      FunctionName: ApexLegendsRankingCron
      Handler: get_player_stats.handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
        - LambdaRole
        - Arn
      Runtime: python3.8
      Timeout: 10
    Metadata:
      SamResourceId: Lambda
  Rule:
    Type: AWS::Events::Rule
    Properties:
      Description: sample-rule
      Name: everyday
      ScheduleExpression: cron(0 15 * * ? *)
      State: ENABLED
      Targets:
      - Arn:
          Fn::GetAtt:
          - Lambda
          - Arn
        Id: lambda
    Metadata:
      SamResourceId: Rule
  LambdaEvent:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: Lambda
      Principal: events.amazonaws.com
      SourceAccount:
        Ref: AWS::AccountId
      SourceArn:
        Fn::GetAtt:
        - Rule
        - Arn
    Metadata:
      SamResourceId: LambdaEvent